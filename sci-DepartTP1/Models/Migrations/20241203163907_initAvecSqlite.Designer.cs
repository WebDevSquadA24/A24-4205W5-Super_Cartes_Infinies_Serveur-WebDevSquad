// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Super_Cartes_Infinies.Data;

#nullable disable

namespace Models.Migrations
{
    [DbContext(typeof(ApplicationDbContext))]
    [Migration("20241203163907_initAvecSqlite")]
    partial class initAvecSqlite
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.10")
                .HasAnnotation("Proxies:ChangeTracking", false)
                .HasAnnotation("Proxies:CheckEquality", false)
                .HasAnnotation("Proxies:LazyLoading", true);

            modelBuilder.Entity("DeckOwnedCard", b =>
                {
                    b.Property<int>("DeckId")
                        .HasColumnType("INTEGER");

                    b.Property<int>("OwnedCardId")
                        .HasColumnType("INTEGER");

                    b.HasKey("DeckId", "OwnedCardId");

                    b.HasIndex("OwnedCardId");

                    b.ToTable("DeckOwnedCard");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("TEXT");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("TEXT");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("TEXT");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex");

                    b.ToTable("AspNetRoles", (string)null);

                    b.HasData(
                        new
                        {
                            Id = "11111111-1111-1111-1111-111111111112",
                            Name = "admin",
                            NormalizedName = "ADMIN"
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("ClaimType")
                        .HasColumnType("TEXT");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("TEXT");

                    b.Property<string>("RoleId")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUser", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("TEXT");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("INTEGER");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("TEXT");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("TEXT");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("INTEGER");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("INTEGER");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("TEXT");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("TEXT");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("TEXT");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("TEXT");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("TEXT");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("INTEGER");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("TEXT");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("INTEGER");

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex");

                    b.ToTable("AspNetUsers", (string)null);

                    b.HasData(
                        new
                        {
                            Id = "11111111-1111-1111-1111-111111111111",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "93ceeb7c-bc7d-437d-a081-1319086a412a",
                            Email = "admin@admin.com",
                            EmailConfirmed = true,
                            LockoutEnabled = true,
                            NormalizedEmail = "ADMIN@ADMIN.COM",
                            NormalizedUserName = "ADMIN@ADMIN.COM",
                            PasswordHash = "AQAAAAIAAYagAAAAEKQDxxlwZgSgN190azkCSi1eKjCbOtlrx1F83sNLoE0L/HqauYgTrgzQkY6SpaTvNw==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "8a877ec0-f45c-49d2-9618-b2184f9893fd",
                            TwoFactorEnabled = false,
                            UserName = "admin@admin.com"
                        },
                        new
                        {
                            Id = "User1Id",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "c2e17b4d-d852-42bf-aa5b-15245f560fc6",
                            EmailConfirmed = false,
                            LockoutEnabled = false,
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "5f258c0e-163f-43e4-b764-8561a47e73a9",
                            TwoFactorEnabled = false
                        },
                        new
                        {
                            Id = "User2Id",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "f70a0ac8-4613-4e6d-a264-a28add760d02",
                            EmailConfirmed = false,
                            LockoutEnabled = false,
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "3ae46bdb-b9ff-46fc-ba47-e1b9a2c83fba",
                            TwoFactorEnabled = false
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("ClaimType")
                        .HasColumnType("TEXT");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("TEXT");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasMaxLength(128)
                        .HasColumnType("TEXT");

                    b.Property<string>("ProviderKey")
                        .HasMaxLength(128)
                        .HasColumnType("TEXT");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("TEXT");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("TEXT");

                    b.Property<string>("RoleId")
                        .HasColumnType("TEXT");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles", (string)null);

                    b.HasData(
                        new
                        {
                            UserId = "11111111-1111-1111-1111-111111111111",
                            RoleId = "11111111-1111-1111-1111-111111111112"
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("TEXT");

                    b.Property<string>("LoginProvider")
                        .HasMaxLength(128)
                        .HasColumnType("TEXT");

                    b.Property<string>("Name")
                        .HasMaxLength(128)
                        .HasColumnType("TEXT");

                    b.Property<string>("Value")
                        .HasColumnType("TEXT");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens", (string)null);
                });

            modelBuilder.Entity("Models.Models.CardPower", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<int>("CardId")
                        .HasColumnType("INTEGER");

                    b.Property<int>("PowerId")
                        .HasColumnType("INTEGER");

                    b.Property<int>("Value")
                        .HasColumnType("INTEGER");

                    b.HasKey("Id");

                    b.HasIndex("CardId");

                    b.HasIndex("PowerId");

                    b.ToTable("CardPowers");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            CardId = 1,
                            PowerId = 1,
                            Value = 1
                        },
                        new
                        {
                            Id = 2,
                            CardId = 1,
                            PowerId = 2,
                            Value = 1
                        },
                        new
                        {
                            Id = 3,
                            CardId = 2,
                            PowerId = 3,
                            Value = 2
                        },
                        new
                        {
                            Id = 4,
                            CardId = 11,
                            PowerId = 4,
                            Value = 1
                        },
                        new
                        {
                            Id = 5,
                            CardId = 3,
                            PowerId = 1,
                            Value = 1
                        },
                        new
                        {
                            Id = 6,
                            CardId = 3,
                            PowerId = 2,
                            Value = 1
                        },
                        new
                        {
                            Id = 7,
                            CardId = 3,
                            PowerId = 3,
                            Value = 1
                        });
                });

            modelBuilder.Entity("Models.Models.Deck", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<bool>("IsCurrent")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<int>("NbDefeats")
                        .HasColumnType("INTEGER");

                    b.Property<int>("NbVictories")
                        .HasColumnType("INTEGER");

                    b.Property<int>("PlayerId")
                        .HasColumnType("INTEGER");

                    b.HasKey("Id");

                    b.HasIndex("PlayerId");

                    b.ToTable("Deck");
                });

            modelBuilder.Entity("Models.Models.GameConfig", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<double>("BeginnerMoney")
                        .HasColumnType("REAL");

                    b.Property<double>("LoserMoney")
                        .HasColumnType("REAL");

                    b.Property<int>("NbCardsToDraw")
                        .HasColumnType("INTEGER");

                    b.Property<int>("NbManaToReceive")
                        .HasColumnType("INTEGER");

                    b.Property<int>("NbMaxCard")
                        .HasColumnType("INTEGER");

                    b.Property<int>("NbMaxDeck")
                        .HasColumnType("INTEGER");

                    b.Property<double>("WinnerMoney")
                        .HasColumnType("REAL");

                    b.HasKey("Id");

                    b.ToTable("GameConfigs");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            BeginnerMoney = 1000.0,
                            LoserMoney = 50.0,
                            NbCardsToDraw = 4,
                            NbManaToReceive = 3,
                            NbMaxCard = 8,
                            NbMaxDeck = 5,
                            WinnerMoney = 100.0
                        });
                });

            modelBuilder.Entity("Models.Models.Pack", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<int>("DefaultRarity")
                        .HasColumnType("INTEGER");

                    b.Property<string>("ImageURL")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<int>("NbCards")
                        .HasColumnType("INTEGER");

                    b.Property<double>("Price")
                        .HasColumnType("REAL");

                    b.HasKey("Id");

                    b.ToTable("Packs");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            DefaultRarity = 0,
                            ImageURL = "https://th-thumbnailer.cdn-si-edu.com/3hb9uUW7hZHUXxJmBmfFkwkivJI=/fit-in/1600x0/https://tf-cmsv2-smithsonianmag-media.s3.amazonaws.com/filer/fd/e7/fde77fde-700d-4a08-8e19-305a0de60130/5879116857_4ab170f4d5_b.jpg",
                            Name = "Basic Pack",
                            NbCards = 3,
                            Price = 200.0
                        },
                        new
                        {
                            Id = 2,
                            DefaultRarity = 0,
                            ImageURL = "https://encrypted-tbn0.gstatic.com/images?q=tbn:ANd9GcSUe7jv0hsq3INvymTpQvP8F-TprBnerk4HGnyHKY5nFj1kXHEg",
                            Name = "Normal Pack",
                            NbCards = 4,
                            Price = 500.0
                        },
                        new
                        {
                            Id = 3,
                            DefaultRarity = 1,
                            ImageURL = "https://i.pinimg.com/474x/f8/39/37/f839377928c94ac922cc39f35fd0a841.jpg",
                            Name = "Super Pack",
                            NbCards = 5,
                            Price = 2000.0
                        });
                });

            modelBuilder.Entity("Models.Models.PairOfPlayers", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("OtherConnectionId")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<int>("PlayerInfo1Id")
                        .HasColumnType("INTEGER");

                    b.Property<int>("PlayerInfo2Id")
                        .HasColumnType("INTEGER");

                    b.Property<string>("UserAId")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("UserBId")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("PlayerInfo1Id");

                    b.HasIndex("PlayerInfo2Id");

                    b.ToTable("PairOfPlayers");
                });

            modelBuilder.Entity("Models.Models.PlayableCardStatus", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<int>("PlayableCardId")
                        .HasColumnType("INTEGER");

                    b.Property<int>("StatusId")
                        .HasColumnType("INTEGER");

                    b.Property<int>("Value")
                        .HasColumnType("INTEGER");

                    b.HasKey("Id");

                    b.HasIndex("PlayableCardId");

                    b.HasIndex("StatusId");

                    b.ToTable("PlayableCardStatus");
                });

            modelBuilder.Entity("Models.Models.PlayerInfo", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("ConnectionId")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<int>("ELO")
                        .HasColumnType("INTEGER");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<int>("attente")
                        .HasColumnType("INTEGER");

                    b.HasKey("Id");

                    b.ToTable("PlayerInfo");
                });

            modelBuilder.Entity("Models.Models.Power", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("IconURL")
                        .HasColumnType("TEXT");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.ToTable("Powers");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Description = "permet à une carte d’attaquer en « premier » et de ne pas recevoir de dégât si elle tue la carte de l’adversaire. (Fonctionne uniquement à l’attaque, pas à la défense)",
                            IconURL = "fas fa-bolt",
                            Name = "First Strike"
                        },
                        new
                        {
                            Id = 2,
                            Description = "lorsqu’une carte défend, elle inflige X de dégâts AVANT de recevoir des dégâts. Si l’attaquant est tué par ces dégâts, l’attaque s’arrête et le défenseur ne reçoit pas de dégâts.",
                            IconURL = "fas fa-exclamation",
                            Name = "Thorns"
                        },
                        new
                        {
                            Id = 3,
                            Description = "soigne les cartes alliées de X incluant elle-même AVANT d’attaquer (mais les cartes ne peuvent pas avoir plus de health qu’au départ.)",
                            IconURL = "fas fa-heartbeat",
                            Name = "Heal"
                        },
                        new
                        {
                            Id = 4,
                            Description = "tant que la carte est sur le terrain son joueur gagne de la vie",
                            IconURL = "fas fa-cross",
                            Name = "Love of Jesus Christ"
                        });
                });

            modelBuilder.Entity("Models.Models.Probability", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<int>("BaseQty")
                        .HasColumnType("INTEGER");

                    b.Property<int>("PackId")
                        .HasColumnType("INTEGER");

                    b.Property<int>("Rarity")
                        .HasColumnType("INTEGER");

                    b.Property<double>("Value")
                        .HasColumnType("REAL");

                    b.HasKey("Id");

                    b.HasIndex("PackId");

                    b.ToTable("Probabilities");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            BaseQty = 0,
                            PackId = 1,
                            Rarity = 0,
                            Value = 0.69999999999999996
                        },
                        new
                        {
                            Id = 2,
                            BaseQty = 0,
                            PackId = 1,
                            Rarity = 1,
                            Value = 0.29999999999999999
                        },
                        new
                        {
                            Id = 3,
                            BaseQty = 0,
                            PackId = 2,
                            Rarity = 0,
                            Value = 0.59999999999999998
                        },
                        new
                        {
                            Id = 4,
                            BaseQty = 1,
                            PackId = 2,
                            Rarity = 1,
                            Value = 0.29999999999999999
                        },
                        new
                        {
                            Id = 5,
                            BaseQty = 0,
                            PackId = 2,
                            Rarity = 2,
                            Value = 0.10000000000000001
                        },
                        new
                        {
                            Id = 6,
                            BaseQty = 0,
                            PackId = 2,
                            Rarity = 3,
                            Value = 0.20000000000000001
                        },
                        new
                        {
                            Id = 7,
                            BaseQty = 0,
                            PackId = 3,
                            Rarity = 1,
                            Value = 0.65000000000000002
                        },
                        new
                        {
                            Id = 8,
                            BaseQty = 1,
                            PackId = 3,
                            Rarity = 2,
                            Value = 0.25
                        },
                        new
                        {
                            Id = 9,
                            BaseQty = 0,
                            PackId = 3,
                            Rarity = 3,
                            Value = 0.10000000000000001
                        });
                });

            modelBuilder.Entity("Models.Models.StarterCard", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<int>("CardId")
                        .HasColumnType("INTEGER");

                    b.HasKey("Id");

                    b.HasIndex("CardId");

                    b.ToTable("StarterCards");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            CardId = 1
                        },
                        new
                        {
                            Id = 2,
                            CardId = 2
                        },
                        new
                        {
                            Id = 3,
                            CardId = 3
                        },
                        new
                        {
                            Id = 4,
                            CardId = 4
                        },
                        new
                        {
                            Id = 5,
                            CardId = 4
                        },
                        new
                        {
                            Id = 6,
                            CardId = 5
                        },
                        new
                        {
                            Id = 7,
                            CardId = 5
                        },
                        new
                        {
                            Id = 8,
                            CardId = 6
                        },
                        new
                        {
                            Id = 9,
                            CardId = 6
                        });
                });

            modelBuilder.Entity("Models.Models.Status", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("IconUrl")
                        .HasColumnType("TEXT");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.ToTable("Status");
                });

            modelBuilder.Entity("Super_Cartes_Infinies.Models.Card", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<int>("Attack")
                        .HasColumnType("INTEGER");

                    b.Property<int>("Cost")
                        .HasColumnType("INTEGER");

                    b.Property<int>("Health")
                        .HasColumnType("INTEGER");

                    b.Property<string>("ImageUrl")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<int>("Rarity")
                        .HasColumnType("INTEGER");

                    b.HasKey("Id");

                    b.ToTable("Cards");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Attack = 3,
                            Cost = 3,
                            Health = 3,
                            ImageUrl = "https://i.pinimg.com/originals/a8/16/49/a81649bd4b0f032ce633161c5a076b87.jpg",
                            Name = "Chat Dragon",
                            Rarity = 0
                        },
                        new
                        {
                            Id = 2,
                            Attack = 2,
                            Cost = 3,
                            Health = 5,
                            ImageUrl = "https://i0.wp.com/thediscerningcat.com/wp-content/uploads/2021/02/tabby-cat-wearing-sunglasses.jpg",
                            Name = "Chat Awesome",
                            Rarity = 1
                        },
                        new
                        {
                            Id = 3,
                            Attack = 2,
                            Cost = 1,
                            Health = 1,
                            ImageUrl = "https://cdn.wallpapersafari.com/27/53/SZ8PO9.jpg",
                            Name = "Chatton Laser",
                            Rarity = 0
                        },
                        new
                        {
                            Id = 4,
                            Attack = 8,
                            Cost = 4,
                            Health = 4,
                            ImageUrl = "https://wallpapers.com/images/hd/epic-cat-poster-baavft05ylgta4j8.jpg",
                            Name = "Chat Spacial",
                            Rarity = 3
                        },
                        new
                        {
                            Id = 5,
                            Attack = 7,
                            Cost = 5,
                            Health = 7,
                            ImageUrl = "https://i.etsystatic.com/6230905/r/il/32aa5a/3474618751/il_fullxfull.3474618751_mfvf.jpg",
                            Name = "Chat Guerrier",
                            Rarity = 3
                        },
                        new
                        {
                            Id = 6,
                            Attack = 4,
                            Cost = 2,
                            Health = 2,
                            ImageUrl = "https://store.playstation.com/store/api/chihiro/00_09_000/container/AU/en/99/EP2402-CUSA05624_00-ETH0000000002875/0/image?_version=00_09_000&platform=chihiro&bg_color=000000&opacity=100&w=720&h=720",
                            Name = "Chat Laser",
                            Rarity = 0
                        },
                        new
                        {
                            Id = 7,
                            Attack = 6,
                            Cost = 4,
                            Health = 3,
                            ImageUrl = "https://images.squarespace-cdn.com/content/51b3dc8ee4b051b96ceb10de/1394662654865-JKOZ7ZFF39247VYDTGG9/hilarious-jedi-cats-fight-video-preview.jpg?content-type=image%2Fjpeg",
                            Name = "Jedi Chat",
                            Rarity = 2
                        },
                        new
                        {
                            Id = 8,
                            Attack = 1,
                            Cost = 2,
                            Health = 9,
                            ImageUrl = "https://i.ytimg.com/vi/2I7pZlUhZak/maxresdefault.jpg",
                            Name = "Blob Chat",
                            Rarity = 2
                        },
                        new
                        {
                            Id = 9,
                            Attack = 5,
                            Cost = 2,
                            Health = 1,
                            ImageUrl = "https://townsquare.media/site/142/files/2011/08/jedicats.jpg?w=980&q=75",
                            Name = "Jedi Chatton",
                            Rarity = 0
                        },
                        new
                        {
                            Id = 10,
                            Attack = 6,
                            Cost = 2,
                            Health = 1,
                            ImageUrl = "https://cdn.theatlantic.com/thumbor/fOZjgqHH0RmXA1A5ek-yDz697W4=/133x0:2091x1020/1200x625/media/img/mt/2015/12/RTRD62Q/original.jpg",
                            Name = "Chat Furtif",
                            Rarity = 0
                        },
                        new
                        {
                            Id = 11,
                            Attack = 0,
                            Cost = 1,
                            Health = 10,
                            ImageUrl = "https://cdn.openart.ai/uploads/image_FkweA3pP_1695446033995_512.webp",
                            Name = "Chat Jesus",
                            Rarity = 3
                        });
                });

            modelBuilder.Entity("Super_Cartes_Infinies.Models.Match", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<bool>("IsMatchCompleted")
                        .HasColumnType("INTEGER");

                    b.Property<bool>("IsPlayerATurn")
                        .HasColumnType("INTEGER");

                    b.Property<int>("PlayerDataAId")
                        .HasColumnType("INTEGER");

                    b.Property<int>("PlayerDataBId")
                        .HasColumnType("INTEGER");

                    b.Property<string>("UserAId")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("UserBId")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("WinnerUserId")
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("PlayerDataAId");

                    b.HasIndex("PlayerDataBId");

                    b.ToTable("Matches");
                });

            modelBuilder.Entity("Super_Cartes_Infinies.Models.MatchPlayerData", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<int>("Health")
                        .HasColumnType("INTEGER");

                    b.Property<int>("IndexBattleField")
                        .HasColumnType("INTEGER");

                    b.Property<int>("Mana")
                        .HasColumnType("INTEGER");

                    b.Property<int>("PlayerId")
                        .HasColumnType("INTEGER");

                    b.HasKey("Id");

                    b.HasIndex("PlayerId");

                    b.ToTable("MatchPlayersData");
                });

            modelBuilder.Entity("Super_Cartes_Infinies.Models.OwnedCard", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<int>("CardId")
                        .HasColumnType("INTEGER");

                    b.Property<int>("PlayerId")
                        .HasColumnType("INTEGER");

                    b.HasKey("Id");

                    b.HasIndex("CardId");

                    b.HasIndex("PlayerId");

                    b.ToTable("OwnedCards");
                });

            modelBuilder.Entity("Super_Cartes_Infinies.Models.PlayableCard", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<int>("Attack")
                        .HasColumnType("INTEGER");

                    b.Property<int>("CardId")
                        .HasColumnType("INTEGER");

                    b.Property<int>("Health")
                        .HasColumnType("INTEGER");

                    b.Property<int>("Index")
                        .HasColumnType("INTEGER");

                    b.Property<int?>("MatchPlayerDataId")
                        .HasColumnType("INTEGER");

                    b.Property<int?>("MatchPlayerDataId1")
                        .HasColumnType("INTEGER");

                    b.Property<int?>("MatchPlayerDataId2")
                        .HasColumnType("INTEGER");

                    b.Property<int?>("MatchPlayerDataId3")
                        .HasColumnType("INTEGER");

                    b.Property<int>("MaxHealth")
                        .HasColumnType("INTEGER");

                    b.HasKey("Id");

                    b.HasIndex("CardId");

                    b.HasIndex("MatchPlayerDataId");

                    b.HasIndex("MatchPlayerDataId1");

                    b.HasIndex("MatchPlayerDataId2");

                    b.HasIndex("MatchPlayerDataId3");

                    b.ToTable("PlayableCards");
                });

            modelBuilder.Entity("Super_Cartes_Infinies.Models.Player", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<int>("ELO")
                        .HasColumnType("INTEGER");

                    b.Property<double>("Money")
                        .HasColumnType("REAL");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<int>("NbDefeats")
                        .HasColumnType("INTEGER");

                    b.Property<int>("NbVictories")
                        .HasColumnType("INTEGER");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("Players");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            ELO = 1000,
                            Money = 0.0,
                            Name = "Test player 1",
                            NbDefeats = 0,
                            NbVictories = 0,
                            UserId = "User1Id"
                        },
                        new
                        {
                            Id = 2,
                            ELO = 1000,
                            Money = 0.0,
                            Name = "Test player 2",
                            NbDefeats = 0,
                            NbVictories = 0,
                            UserId = "User2Id"
                        });
                });

            modelBuilder.Entity("DeckOwnedCard", b =>
                {
                    b.HasOne("Super_Cartes_Infinies.Models.OwnedCard", null)
                        .WithMany()
                        .HasForeignKey("DeckId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Models.Models.Deck", null)
                        .WithMany()
                        .HasForeignKey("OwnedCardId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Models.Models.CardPower", b =>
                {
                    b.HasOne("Super_Cartes_Infinies.Models.Card", "Card")
                        .WithMany("CardPowers")
                        .HasForeignKey("CardId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Models.Models.Power", "Power")
                        .WithMany("CardPowers")
                        .HasForeignKey("PowerId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Card");

                    b.Navigation("Power");
                });

            modelBuilder.Entity("Models.Models.Deck", b =>
                {
                    b.HasOne("Super_Cartes_Infinies.Models.Player", "Player")
                        .WithMany("Decks")
                        .HasForeignKey("PlayerId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Player");
                });

            modelBuilder.Entity("Models.Models.PairOfPlayers", b =>
                {
                    b.HasOne("Models.Models.PlayerInfo", "PlayerInfo1")
                        .WithMany()
                        .HasForeignKey("PlayerInfo1Id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Models.Models.PlayerInfo", "PlayerInfo2")
                        .WithMany()
                        .HasForeignKey("PlayerInfo2Id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("PlayerInfo1");

                    b.Navigation("PlayerInfo2");
                });

            modelBuilder.Entity("Models.Models.PlayableCardStatus", b =>
                {
                    b.HasOne("Super_Cartes_Infinies.Models.PlayableCard", "PlayableCard")
                        .WithMany("PlayableCardStatuses")
                        .HasForeignKey("PlayableCardId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Models.Models.Status", "Status")
                        .WithMany()
                        .HasForeignKey("StatusId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("PlayableCard");

                    b.Navigation("Status");
                });

            modelBuilder.Entity("Models.Models.Probability", b =>
                {
                    b.HasOne("Models.Models.Pack", "Pack")
                        .WithMany("Probabilities")
                        .HasForeignKey("PackId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Pack");
                });

            modelBuilder.Entity("Models.Models.StarterCard", b =>
                {
                    b.HasOne("Super_Cartes_Infinies.Models.Card", "Card")
                        .WithMany()
                        .HasForeignKey("CardId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Card");
                });

            modelBuilder.Entity("Super_Cartes_Infinies.Models.Match", b =>
                {
                    b.HasOne("Super_Cartes_Infinies.Models.MatchPlayerData", "PlayerDataA")
                        .WithMany()
                        .HasForeignKey("PlayerDataAId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("Super_Cartes_Infinies.Models.MatchPlayerData", "PlayerDataB")
                        .WithMany()
                        .HasForeignKey("PlayerDataBId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("PlayerDataA");

                    b.Navigation("PlayerDataB");
                });

            modelBuilder.Entity("Super_Cartes_Infinies.Models.MatchPlayerData", b =>
                {
                    b.HasOne("Super_Cartes_Infinies.Models.Player", "Player")
                        .WithMany()
                        .HasForeignKey("PlayerId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Player");
                });

            modelBuilder.Entity("Super_Cartes_Infinies.Models.OwnedCard", b =>
                {
                    b.HasOne("Super_Cartes_Infinies.Models.Card", "Card")
                        .WithMany()
                        .HasForeignKey("CardId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Super_Cartes_Infinies.Models.Player", "Player")
                        .WithMany("OwnedCards")
                        .HasForeignKey("PlayerId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Card");

                    b.Navigation("Player");
                });

            modelBuilder.Entity("Super_Cartes_Infinies.Models.PlayableCard", b =>
                {
                    b.HasOne("Super_Cartes_Infinies.Models.Card", "Card")
                        .WithMany()
                        .HasForeignKey("CardId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Super_Cartes_Infinies.Models.MatchPlayerData", null)
                        .WithMany("BattleField")
                        .HasForeignKey("MatchPlayerDataId");

                    b.HasOne("Super_Cartes_Infinies.Models.MatchPlayerData", null)
                        .WithMany("CardsPile")
                        .HasForeignKey("MatchPlayerDataId1");

                    b.HasOne("Super_Cartes_Infinies.Models.MatchPlayerData", null)
                        .WithMany("Graveyard")
                        .HasForeignKey("MatchPlayerDataId2");

                    b.HasOne("Super_Cartes_Infinies.Models.MatchPlayerData", null)
                        .WithMany("Hand")
                        .HasForeignKey("MatchPlayerDataId3");

                    b.Navigation("Card");
                });

            modelBuilder.Entity("Super_Cartes_Infinies.Models.Player", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", "User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("Models.Models.Pack", b =>
                {
                    b.Navigation("Probabilities");
                });

            modelBuilder.Entity("Models.Models.Power", b =>
                {
                    b.Navigation("CardPowers");
                });

            modelBuilder.Entity("Super_Cartes_Infinies.Models.Card", b =>
                {
                    b.Navigation("CardPowers");
                });

            modelBuilder.Entity("Super_Cartes_Infinies.Models.MatchPlayerData", b =>
                {
                    b.Navigation("BattleField");

                    b.Navigation("CardsPile");

                    b.Navigation("Graveyard");

                    b.Navigation("Hand");
                });

            modelBuilder.Entity("Super_Cartes_Infinies.Models.PlayableCard", b =>
                {
                    b.Navigation("PlayableCardStatuses");
                });

            modelBuilder.Entity("Super_Cartes_Infinies.Models.Player", b =>
                {
                    b.Navigation("Decks");

                    b.Navigation("OwnedCards");
                });
#pragma warning restore 612, 618
        }
    }
}
